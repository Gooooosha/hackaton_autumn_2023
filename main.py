from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import executor
import psycopg2
import aiohttp
import easyocr
from aiogram.types import ParseMode
import speech_recognition as sr
import soundfile as sf
from geopy.geocoders import Nominatim
from datetime import datetime
from PyPDF2 import PdfFileWriter, PdfFileReader
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
pdfmetrics.registerFont(TTFont('Arial', 'Arial.ttf'))

class States(StatesGroup):
    CONTRACT_NUMBER = State()
    PASSWORD = State()
    PASSPORT = State()

class States_Manager(StatesGroup):
    LOGIN = State()
    PASSWORD_MANAGER = State()

class States_waybill(StatesGroup):
    SENDING_MODE = State()
    NUMBER_OF_PLACES = State()
    DESCRIPTION_OF_ATTACHMENTS = State()
    WEIGHT_OF_EACH_SEAT = State()
    COST_OF_INVESTMENT = State()
    DELIVERY_ADDRESS = State()
    STORE_ADDRESS = State()
    ADDRESS = State()
    METHOD_OF_PAYMENT = State()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
geolocator = Nominatim(user_agent="my_geocoder")
r = sr.Recognizer()

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
authorization_button = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ –∫–ª–∏–µ–Ω—Ç–∞ üë´")
authorization_button_manager = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üë©üèª‚Äçüíª")
authorization_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(authorization_button).add(authorization_button_manager)

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")
cancel_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_button)

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π ‚ùå")
cancel_markup_waybill = types.ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_button)

buttons = [
    #types.KeyboardButton("1"),
    #types.KeyboardButton("2"),
    types.KeyboardButton("–í—ã–π—Ç–∏ üö™"),
]
custom_manager = types.ReplyKeyboardMarkup(resize_keyboard=True)
custom_manager.add(*buttons)

buttons = [
    types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é üìÉ"),
    types.KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üì≤"),
    types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ üòë"),
    types.KeyboardButton("–í—ã–π—Ç–∏ üö™"),
]
custom_client = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
custom_client.add(*buttons)

@dp.message_handler(Command("start"), state="*")
async def process_start_command(message: types.Message):
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM manager WHERE tg_id = %s", (str(message.from_user.id),))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if result is not None:
        await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚úÖ", reply_markup=custom_manager)
        return
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM client WHERE tg_id = %s", (str(message.from_user.id),))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if result is not None:
        await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ ‚úÖ", reply_markup=custom_client)
        return
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Å—è! üîÜ", reply_markup=authorization_markup)

@dp.message_handler(Text(equals="–û—Ç–º–µ–Ω–∞ ‚ùå"), state="*")
async def process_cancel(message: types.Message, state: FSMContext):
    await message.reply("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=authorization_markup)
    await state.finish()

@dp.message_handler(Text(equals="–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π ‚ùå"), state="*")
async def process_cancel(message: types.Message, state: FSMContext):
    await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=custom_client)
    await state.finish()

@dp.message_handler(Text(equals="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ –∫–ª–∏–µ–Ω—Ç–∞ üë´"), state="*")
async def process_authorization(message: types.Message):
    await message.reply("–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:", reply_markup=cancel_markup)
    await States.CONTRACT_NUMBER.set()

@dp.message_handler(state=States.CONTRACT_NUMBER)
async def process_contract_number(message: types.Message, state: FSMContext):
    await state.update_data(contract_number=message.text)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=cancel_markup)
    await States.PASSWORD.set()

@dp.message_handler(state=States.PASSWORD)
async def process_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç:", reply_markup=cancel_markup)
    await States.PASSPORT.set()

@dp.message_handler(state=States.PASSPORT, content_types=[types.ContentType.PHOTO])
async def process_passport_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    photo_file_id = photo.file_id
    file = await bot.get_file(photo_file_id)
    await file.download('./pasp/photo.jpg')
    result = []
    reader = easyocr.Reader(['ru'])  
    image = './pasp/photo.jpg'
    texts = reader.readtext(image)
    for (bbox, text, prob) in texts:
        result.append(text)
    result = ''.join(result[:3])
    await state.update_data(passport=result)
    user_data = await state.get_data()
    is_authenticated = check_authentication_client(user_data['contract_number'], user_data['password'], user_data['passport'])
    if is_authenticated:
        await message.reply(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['contract_number']}!", reply_markup=types.ReplyKeyboardRemove())
        
        conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
        cur = conn.cursor()
        cur.execute("SELECT tg_id FROM manager WHERE tg_id <> '0' ORDER BY clients ASC LIMIT 1")
        manager_tg_id = cur.fetchone()
        cur.close()
        conn.close()

        conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
        cursor = conn.cursor()
        update_query = "UPDATE client SET tg_id = %s, password = %s, manager = %s WHERE number = %s"
        cursor.execute(update_query, (message.from_user.id, user_data['password'], manager_tg_id[0], user_data['contract_number']))
        conn.commit()
        conn.close()

        conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
        cursor = conn.cursor()
        cursor.execute('SELECT clients FROM manager WHERE tg_id = %s', (manager_tg_id[0],))
        clients_manager = cursor.fetchone()
        update_query = "UPDATE manager SET clients = %s WHERE tg_id = %s"
        cursor.execute(update_query, (str(int(clients_manager[0]) + 1), manager_tg_id[0]))
        conn.commit()
        conn.close()
        
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=custom_client)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞", reply_markup=authorization_markup)
    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É)
def check_authentication_client(contract_number, password, passport):
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                            password='egor123', host='localhost')
    cursor = conn.cursor()
    cursor.execute('SELECT password FROM Client WHERE number = %s AND passport = %s', (contract_number,passport))
    client_password = cursor.fetchone()
    conn.close()
    try:
        return password == client_password[0]
    except:
        return False

@dp.message_handler(Text(equals="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üë©üèª‚Äçüíª"), state="*")
async def process_authorization(message: types.Message):
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM manager WHERE tg_id = %s", (str(message.from_user.id),))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if result is not None:
        await message.reply("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä")
        return
    await message.reply("–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=cancel_markup)
    await States_Manager.LOGIN.set()

@dp.message_handler(state=States_Manager.LOGIN)
async def process_contract_number(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=cancel_markup)
    await States_Manager.PASSWORD_MANAGER.set()

@dp.message_handler(state=States_Manager.PASSWORD_MANAGER)
async def process_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    user_data = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –ø–∞—Ä–æ–ª—è –∑–¥–µ—Å—å (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    is_authenticated = check_authentication_manager(user_data['login'], user_data['password'])
    if is_authenticated:
        await message.reply(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['login']}!", reply_markup=types.ReplyKeyboardRemove())
        conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
        cursor = conn.cursor()
        update_query = "UPDATE manager SET password = %s, tg_id = %s WHERE login = %s"

        cursor.execute(update_query, (user_data['password'], message.from_user.id, user_data['login']))
        conn.commit()
        conn.close()
        
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=custom_manager)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=authorization_markup)
    await state.finish()

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É)
def check_authentication_manager(login, password):
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cursor = conn.cursor()
    cursor.execute('SELECT password FROM Manager WHERE login = %s', (login,))
    client_password = cursor.fetchone()
    conn.close()
    try:
        return password == client_password[0]
    except:
        return False

# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton("–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å", callback_data="–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å")
button2 = types.InlineKeyboardButton("—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥", callback_data="—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥")
button3 = types.InlineKeyboardButton("—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å", callback_data="—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å")
button4 = types.InlineKeyboardButton("–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥", callback_data="–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥")
keyboard.row(button1)
keyboard.row(button2)
keyboard.row(button3)
keyboard.row(button4)

@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é üìÉ")
async def create_invoice(message: types.Message):
    await message.reply("üî∏–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π'", reply_markup=cancel_markup_waybill)
    await message.reply("üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=keyboard)
    await States_waybill.SENDING_MODE.set()

@dp.callback_query_handler(lambda query: query.data in ['–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å', '—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥', '—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å', '–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥'], state=States_waybill.SENDING_MODE)
async def process_sending_mode(query: types.CallbackQuery, state: FSMContext):
    sending_mode = query.data
    await state.update_data(sending_mode=sending_mode)
    await bot.edit_message_text(chat_id=query.message.chat.id, text=f"üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏: {sending_mode}", message_id=query.message.message_id)
    await query.message.answer("üîπ–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç")
    await States_waybill.NUMBER_OF_PLACES.set()

@dp.message_handler(state=States_waybill.NUMBER_OF_PLACES)
async def process_password(message: types.Message, state: FSMContext):
    await state.update_data(number_of_places=message.text)
    await message.reply("üîπ–û–ø–∏—à–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ ;", reply_markup=cancel_markup_waybill)
    await States_waybill.DESCRIPTION_OF_ATTACHMENTS.set()

@dp.message_handler(state=States_waybill.DESCRIPTION_OF_ATTACHMENTS)
async def process_password(message: types.Message, state: FSMContext):
    await state.update_data(description_of_attachments=message.text)
    await message.reply("üîπ–û–ø–∏—à–∏—Ç–µ –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ ;", reply_markup=cancel_markup_waybill)
    await States_waybill.WEIGHT_OF_EACH_SEAT.set()

keyboard2 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton("–æ–±—â–∞—è", callback_data="–æ–±—â–∞—è")
button2 = types.InlineKeyboardButton("–ø–æ –º–µ—Å—Ç–∞–º", callback_data="–ø–æ –º–µ—Å—Ç–∞–º")
keyboard2.row(button1)
keyboard2.row(button2)

@dp.message_handler(state=States_waybill.WEIGHT_OF_EACH_SEAT)
async def process_password(message: types.Message, state: FSMContext):
    await state.update_data(weight_of_each_seat=message.text)
    await message.reply("üî∏–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π'", reply_markup=cancel_markup_waybill)
    await message.reply("üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è", reply_markup=keyboard2)
    await States_waybill.COST_OF_INVESTMENT.set()

keyboard3 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton("–ü–í–ó", callback_data="–ü–í–ó")
button2 = types.InlineKeyboardButton("–ö –¥–≤–µ—Ä–∏", callback_data="–ö –¥–≤–µ—Ä–∏")
keyboard3.row(button1)
keyboard3.row(button2)

@dp.callback_query_handler(lambda query: query.data in ['–æ–±—â–∞—è', '–ø–æ –º–µ—Å—Ç–∞–º'], state=States_waybill.COST_OF_INVESTMENT)
async def process_sending_mode(query: types.CallbackQuery, state: FSMContext):
    sending_mode = query.data
    await state.update_data(cost_of_investment=sending_mode)
    await bot.edit_message_text(chat_id=query.message.chat.id, text=f"üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è: {sending_mode}", message_id=query.message.message_id)
    await query.message.answer("üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=keyboard3)
    await States_waybill.DELIVERY_ADDRESS.set()

keyboard4 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton("–ü–í–ó(1)", callback_data="–ü–í–ó(1)")
button2 = types.InlineKeyboardButton("–ü–í–ó(2)", callback_data="–ü–í–ó(2)")
button3 = types.InlineKeyboardButton("–ü–í–ó(3)", callback_data="–ü–í–ó(3)")
button4 = types.InlineKeyboardButton("–ü–í–ó(4)", callback_data="–ü–í–ó(4)")
button5 = types.InlineKeyboardButton("–ü–í–ó(5)", callback_data="–ü–í–ó(5)")
keyboard4.row(button1)
keyboard4.row(button2)
keyboard4.row(button3)
keyboard4.row(button4)
keyboard4.row(button5)

@dp.callback_query_handler(lambda query: query.data in ['–ü–í–ó', '–ö –¥–≤–µ—Ä–∏'], state=States_waybill.DELIVERY_ADDRESS)
async def process_sending_mode(query: types.CallbackQuery, state: FSMContext):
    sending_mode = query.data
    await state.update_data(delivery_address=sending_mode)
    await bot.edit_message_text(chat_id=query.message.chat.id, text=f"üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {sending_mode}", message_id=query.message.message_id)
    if sending_mode == '–ü–í–ó':
        await query.message.answer("üîπ–í—ã–±–µ—Ä–∏—Ç–µ –ü–í–ó", reply_markup=keyboard4)
        await States_waybill.STORE_ADDRESS.set()
    else:
        await query.message.answer("üîπ–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å")
        await States_waybill.ADDRESS.set()


keyboard5 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º", callback_data="–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º")
button2 = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É", callback_data="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É")
keyboard5.row(button1)
keyboard5.row(button2)

@dp.message_handler(state=States_waybill.ADDRESS, content_types=[types.ContentType.TEXT])
async def process_text_address(message: types.Message, state: FSMContext):
    address = message.text
    location = geolocator.geocode(address)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

    if location:
        latitude, longitude = location.latitude, location.longitude
        await bot.send_location(message.chat.id, latitude, longitude)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        async with aiohttp.ClientSession() as session:
                async with session.get(f'https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}') as resp:
                    data = await resp.json()
                    address = ""

                    if 'address' in data:
                        if 'city' in data['address']:
                            address += f"–ì–æ—Ä–æ–¥: {data['address']['city']}\n"
                        if 'road' in data['address']:
                            address += f"–£–ª–∏—Ü–∞: {data['address']['road']}\n"
                        if 'house_number' in data['address']:
                            address += f"–î–æ–º: {data['address']['house_number']}\n"
                    else:
                        address += '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'

                    await message.reply(address, parse_mode=ParseMode.HTML)
    else:
        await message.reply("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.")
    await state.update_data(address=address)
    await message.reply("üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=keyboard5)
    await States_waybill.METHOD_OF_PAYMENT.set()

@dp.message_handler(state=States_waybill.ADDRESS, content_types=[types.ContentType.VOICE])
async def process_voice_address(message: types.Message, state: FSMContext):
    voice = await message.voice.get_file()
    await bot.download_file(file_path=voice.file_path, destination=f"./voices/{voice.file_id}.ogg")
    data, samplerate = sf.read(f"./voices/{voice.file_id}.ogg")
    sf.write(f"./voices/{voice.file_id}.wav", data, samplerate)
    file = sr.AudioFile(f"./voices/{voice.file_id}.wav")
    try:
        with file as source:
            audio = r.record(source)
            result = r.recognize_google(audio,language='ru-RU')
        location = geolocator.geocode(result)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if location:
            latitude, longitude = location.latitude, location.longitude
            await bot.send_location(message.chat.id, latitude, longitude)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(f'https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}') as resp:
                    data = await resp.json()
                    address = ""

                    if 'address' in data:
                        if 'city' in data['address']:
                            address += f"–ì–æ—Ä–æ–¥: {data['address']['city']}\n"
                        if 'road' in data['address']:
                            address += f"–£–ª–∏—Ü–∞: {data['address']['road']}\n"
                        if 'house_number' in data['address']:
                            address += f"–î–æ–º: {data['address']['house_number']}\n"
                    else:
                        address += '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'

                    await message.reply(address, parse_mode=ParseMode.HTML)
        else:
            await message.reply("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.")
    except sr.UnknownValueError:
        await bot.send_message(message.from_user.id, "–ë–æ—Ç –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª —Ñ—Ä–∞–∑—É")
    except sr.RequestError:
        await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞")

    await state.update_data(address=address)
    await message.reply("üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=keyboard5)
    await States_waybill.METHOD_OF_PAYMENT.set()

@dp.message_handler(state=States_waybill.ADDRESS, content_types=[types.ContentType.LOCATION])
async def process_location_address(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location = message.location
    latitude = location.latitude
    longitude = location.longitude
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}') as resp:
            data = await resp.json()
            address = ""

            if 'address' in data:
                if 'city' in data['address']:
                    address += f"–ì–æ—Ä–æ–¥: {data['address']['city']}\n"
                if 'road' in data['address']:
                    address += f"–£–ª–∏—Ü–∞: {data['address']['road']}\n"
                if 'house_number' in data['address']:
                    address += f"–î–æ–º: {data['address']['house_number']}\n"
            else:
                address += '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'

            await message.reply(address, parse_mode=ParseMode.HTML)
    await state.update_data(address=address)
    await message.reply("üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=keyboard5)
    await States_waybill.METHOD_OF_PAYMENT.set()

@dp.callback_query_handler(lambda query: query.data in ['–ü–í–ó(1)', '–ü–í–ó(2)', '–ü–í–ó(3)', '–ü–í–ó(4)', '–ü–í–ó(5)'], state=States_waybill.STORE_ADDRESS)
async def process_sending_mode(query: types.CallbackQuery, state: FSMContext):
    sending_mode = query.data
    await state.update_data(address=sending_mode)
    await bot.edit_message_text(chat_id=query.message.chat.id, text=f"üîπ–í—ã–±–µ—Ä–∏—Ç–µ –ü–í–ó: {sending_mode}", message_id=query.message.message_id)
    await query.message.answer("üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=keyboard5)
    await States_waybill.METHOD_OF_PAYMENT.set()

@dp.callback_query_handler(lambda query: query.data in ['–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º', '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É'], state=States_waybill.METHOD_OF_PAYMENT)
async def process_sending_mode(query: types.CallbackQuery, state: FSMContext):
    sending_mode = query.data
    await state.update_data(method_of_payment=sending_mode)
    await bot.edit_message_text(chat_id=query.message.chat.id, text=f"üîπ–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {sending_mode}", message_id=query.message.message_id)
    
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cursor = conn.cursor()
    insert_query = "INSERT INTO waybill (tg_id, date) VALUES (%s, %s) RETURNING number"
    cursor.execute(insert_query, (query.from_user.id, f"{datetime.now().day}.{datetime.now().month}.{datetime.now().year}"))
    number = cursor.fetchone()[0]
    conn.commit()
    conn.close()
    await query.message.answer(f"üéâ –ù–∞–∫–ª–∞–¥–Ω–∞—è #{number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ üéâ", reply_markup=custom_client)
    waybill_data = await state.get_data()
    print(waybill_data)

    packet = io.BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)
    can.setFont('Arial', 9)

    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cursor = conn.cursor()
    cursor.execute('SELECT fio, number FROM client WHERE tg_id = %s', (str(query.from_user.id),))
    client_fio = cursor.fetchone()
    conn.close()

    can.drawString(255, 777, str(number))
    can.drawString(300, 777, str(datetime.now().day))
    can.drawString(325, 777, str(datetime.now().month))
    can.drawString(345, 777, str(datetime.now().year))
    can.drawString(110, 655, client_fio[0])
    can.drawString(400, 655, client_fio[1])
    can.drawString(140, 618, waybill_data['sending_mode'])
    description_of_attachments = waybill_data['description_of_attachments'].split(';')
    weight_of_each_seat = waybill_data['weight_of_each_seat'].split(';')
    left = 80
    bottom = 550
    for i in range(len(description_of_attachments)):
        can.drawString(left, bottom, description_of_attachments[i])
        can.drawString(left + 130, bottom, weight_of_each_seat[i])
        can.drawString(left + 215, bottom, waybill_data['cost_of_investment'])
        bottom -= 28
    can.drawString(140, 350, waybill_data['address'])
    can.drawString(140, 310, waybill_data['method_of_payment'])

    can.showPage()
    can.save()
    packet.seek(0)
    new_pdf = PdfFileReader(packet)
    existing_pdf = PdfFileReader(open("pattern.pdf", "rb"))
    output = PdfFileWriter()
    page = existing_pdf.getPage(0)
    page.mergePage(new_pdf.getPage(0))
    output.addPage(page)
    pdf_filename = f"./waybill/{number}.pdf"
    outputStream = open(pdf_filename, "wb")
    output.write(outputStream)
    outputStream.close()
    with open(pdf_filename, "rb") as pdf_file:
        await bot.send_document(chat_id=query.message.chat.id, document=types.InputFile(pdf_file))

    await state.finish()

@dp.message_handler(lambda message: message.text == "–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üì≤")
async def call_manager(message: types.Message):
    
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, url FROM chat WHERE status = '0' LIMIT 1")
    record = cursor.fetchone()
    if record == None:
        await message.reply("–í—Å–µ —á–∞—Ç—ã –∑–∞–Ω—è—Ç—ã!", reply_markup=custom_client)
        return
    conn.close()
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cursor = conn.cursor()
    cursor.execute("SELECT manager FROM client WHERE tg_id = %s", (str(message.from_user.id),))
    manager = cursor.fetchone()
    conn.close()
    
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cursor = conn.cursor()
    update_query = "UPDATE chat SET client = %s, manager = %s, status = 1 WHERE chat_id = %s"
    cursor.execute(update_query, (str(message.from_user.id), manager[0], record[0]))
    conn.commit()
    conn.close()

    link_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=record[1])
    keyboard = types.InlineKeyboardMarkup().add(link_button)
    await bot.send_message(manager[0], "–ö–ª–∏–µ–Ω—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –≤ —á–∞—Ç...", reply_markup=keyboard)
    await bot.send_message(message.from_user.id, "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç...", reply_markup=keyboard)


@dp.message_handler(commands=['help'])
async def finish_command(message: types.Message):
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cur = conn.cursor()
    cur.execute("SELECT * FROM chat WHERE chat_id = %s", (str(message.chat.id),))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if result is not None:
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="continue_help")
        keyboard.add(button)
        await bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω?", reply_markup=keyboard)
    else:
        await bot.send_message(message.from_user.id, "–ö–æ–º–∞–Ω–∏—è –ò–ö–¢–ò–ù - —ç—Ç–æ —Ç–æ–ø!", reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data == "continue_help")
async def continue_help(query: types.CallbackQuery):
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cur = conn.cursor()
    cur.execute("SELECT * FROM chat WHERE chat_id = %s", (str(query.message.chat.id),))
    result = cur.fetchone()
    cur.close()
    conn.close()
    user1 = result[2]
    user2 = result[3]
    await bot.kick_chat_member(chat_id=query.message.chat.id, user_id=user1)
    await bot.kick_chat_member(chat_id=query.message.chat.id, user_id=user2)
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cursor = conn.cursor()
    update_query = "UPDATE chat SET client = 0, manager = 0, status = 0 WHERE chat_id = %s"
    cursor.execute(update_query, (str(query.message.chat.id), ))
    conn.commit()
    conn.close()
    await bot.delete_message(query.message.chat.id, query.message.message_id)
        

@dp.message_handler(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ üòë")
async def register_complaint(message: types.Message):
    await message.reply("–í—ã –Ω–∞–∂–∞–ª–∏ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.message_handler(lambda message: message.text == "1")
async def create_invoice(message: types.Message):
    await message.reply("–í—ã –Ω–∞–∂–∞–ª–∏ 1")

@dp.message_handler(lambda message: message.text == "2")
async def call_manager(message: types.Message):
    await message.reply("–í—ã –Ω–∞–∂–∞–ª–∏ 2")

@dp.message_handler(lambda message: message.text == "–í—ã–π—Ç–∏ üö™")
async def register_complaint(message: types.Message):
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM manager WHERE tg_id = %s", (str(message.from_user.id),))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if result is not None:
        conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
        cursor = conn.cursor()
        update_query = "UPDATE manager SET tg_id = 0 WHERE tg_id = %s"
        cursor.execute(update_query, (str(message.from_user.id),))
        conn.commit()
        conn.close()
        await message.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=authorization_markup)
        return
    conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM client WHERE tg_id = %s", (str(message.from_user.id),))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if result is not None:
        conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
        cursor = conn.cursor()
        cursor.execute('SELECT manager FROM client WHERE tg_id = %s', (str(message.from_user.id),))
        manager = cursor.fetchone()
        cursor.execute('SELECT clients FROM manager WHERE tg_id = %s', (manager[0],))
        clients = cursor.fetchone()
        update_query = "UPDATE manager SET clients = %s WHERE tg_id = %s"
        cursor.execute(update_query, (str(int(clients[0]) - 1), manager[0]))
        conn.commit()
        conn.close()
        conn = psycopg2.connect(dbname='hackaton', user='postgres', 
                        password='egor123', host='localhost')
        cursor = conn.cursor()
        update_query = "UPDATE client SET tg_id = 0, manager = 0 WHERE tg_id = %s"
        cursor.execute(update_query, (str(message.from_user.id),))
        conn.commit()
        conn.close()
        await message.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=authorization_markup)
        return

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)